basePath: /api/v1
definitions:
  controllers.Payment:
    properties:
      customer:
        type: integer
      employee:
        type: integer
      payday:
        type: string
      paymenttype:
        type: integer
      roomtype:
        type: integer
    type: object
  ent.Customer:
    properties:
      USERNAME:
        description: USERNAME holds the value of the "USERNAME" field.
        type: string
      edges:
        $ref: '#/definitions/ent.CustomerEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the CustomerQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.CustomerEdges:
    properties:
      payment:
        description: Payment holds the value of the payment edge.
        items:
          $ref: '#/definitions/ent.Payment'
        type: array
    type: object
  ent.Employee:
    properties:
      EMPLOYEENAME:
        description: EMPLOYEENAME holds the value of the "EMPLOYEENAME" field.
        type: string
      EMPLOYEEPASSWORD:
        description: EMPLOYEEPASSWORD holds the value of the "EMPLOYEEPASSWORD" field.
        type: string
      edges:
        $ref: '#/definitions/ent.EmployeeEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the EmployeeQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.EmployeeEdges:
    properties:
      payment:
        description: Payment holds the value of the payment edge.
        items:
          $ref: '#/definitions/ent.Payment'
        type: array
    type: object
  ent.Payment:
    properties:
      PAYDAY:
        description: PAYDAY holds the value of the "PAYDAY" field.
        type: string
      edges:
        $ref: '#/definitions/ent.PaymentEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the PaymentQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.PaymentEdges:
    properties:
      customer:
        $ref: '#/definitions/ent.Customer'
        description: Customer holds the value of the customer edge.
        type: object
      employee:
        $ref: '#/definitions/ent.Employee'
        description: Employee holds the value of the employee edge.
        type: object
      paymenttype:
        $ref: '#/definitions/ent.Paymenttype'
        description: Paymenttype holds the value of the paymenttype edge.
        type: object
      roomtype:
        $ref: '#/definitions/ent.Roomtype'
        description: Roomtype holds the value of the roomtype edge.
        type: object
    type: object
  ent.Paymenttype:
    properties:
      TYPE:
        description: TYPE holds the value of the "TYPE" field.
        type: string
      edges:
        $ref: '#/definitions/ent.PaymenttypeEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the PaymenttypeQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.PaymenttypeEdges:
    properties:
      payment:
        description: Payment holds the value of the payment edge.
        items:
          $ref: '#/definitions/ent.Payment'
        type: array
    type: object
  ent.Roomtype:
    properties:
      ROOMPRICE:
        description: ROOMPRICE holds the value of the "ROOMPRICE" field.
        type: integer
      edges:
        $ref: '#/definitions/ent.RoomtypeEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the RoomtypeQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.RoomtypeEdges:
    properties:
      payment:
        description: Payment holds the value of the payment edge.
        items:
          $ref: '#/definitions/ent.Payment'
        type: array
    type: object
  gin.H:
    additionalProperties: true
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server for SUT SE 2563
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: SUT SA Example API
  version: "1.0"
paths:
  /customers:
    get:
      description: list customer entities
      operationId: list-customer
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Customer'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List customer entities
    post:
      consumes:
      - application/json
      description: Create customer
      operationId: create-customer
      parameters:
      - description: Customer entity
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/ent.Customer'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Customer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create customer
  /customers/{id}:
    get:
      description: get customer by ID
      operationId: get-customer
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Customer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a customer entity by ID
  /employees:
    get:
      description: list employee entities
      operationId: list-employee
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Employee'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List employee entities
    post:
      consumes:
      - application/json
      description: Create employee
      operationId: create-employee
      parameters:
      - description: Employee entity
        in: body
        name: employee
        required: true
        schema:
          $ref: '#/definitions/ent.Employee'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Employee'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create employee
  /employees/{id}:
    get:
      description: get employee by ID
      operationId: get-employee
      parameters:
      - description: Employee ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Employee'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a employee entity by ID
  /payments:
    get:
      description: list payment entities
      operationId: list-payment
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Payment'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List payment entities
    post:
      consumes:
      - application/json
      description: Create payment
      operationId: create-payment
      parameters:
      - description: Payment entity
        in: body
        name: payment
        required: true
        schema:
          $ref: '#/definitions/ent.Payment'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Payment'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create payment
  /payments/{id}:
    get:
      description: get payment by ID
      operationId: get-payment
      parameters:
      - description: Payment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.Payment'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a payment entity by ID
  /paymenttypes:
    get:
      description: list paymenttype entities
      operationId: list-paymenttype
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Paymenttype'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List paymenttype entities
    post:
      consumes:
      - application/json
      description: Create paymenttype
      operationId: create-paymenttype
      parameters:
      - description: Paymenttype entity
        in: body
        name: paymenttype
        required: true
        schema:
          $ref: '#/definitions/ent.Paymenttype'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Paymenttype'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create paymenttype
  /paymenttypes/{id}:
    get:
      description: get paymenttype by ID
      operationId: get-paymenttype
      parameters:
      - description: Paymenttype ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Paymenttype'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a paymenttype entity by ID
  /roomtypes:
    get:
      description: list roomtype entities
      operationId: list-roomtype
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Roomtype'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List roomtype entities
    post:
      consumes:
      - application/json
      description: Create roomtype
      operationId: create-roomtype
      parameters:
      - description: Roomtype entity
        in: body
        name: roomtype
        required: true
        schema:
          $ref: '#/definitions/ent.Roomtype'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Roomtype'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create roomtype
  /roomtypes/{id}:
    get:
      description: get roomtype by ID
      operationId: get-roomtype
      parameters:
      - description: Roomtype ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Roomtype'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a roomtype entity by ID
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
  BasicAuth:
    type: basic
  OAuth2AccessCode:
    authorizationUrl: https://example.com/oauth/authorize
    flow: accessCode
    scopes:
      admin: ' Grants read and write access to administrative information'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Application:
    flow: application
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Implicit:
    authorizationUrl: https://example.com/oauth/authorize
    flow: implicit
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    type: oauth2
  OAuth2Password:
    flow: password
    scopes:
      admin: ' Grants read and write access to administrative information'
      read: ' Grants read access'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
swagger: "2.0"
