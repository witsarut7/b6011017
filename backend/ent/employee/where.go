// Code generated by entc, DO NOT EDIT.

package employee

import (
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/witsarut7/app/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// EMPLOYEENAME applies equality check predicate on the "EMPLOYEENAME" field. It's identical to EMPLOYEENAMEEQ.
func EMPLOYEENAME(v string) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEMPLOYEENAME), v))
	})
}

// EMPLOYEEPASSWORD applies equality check predicate on the "EMPLOYEEPASSWORD" field. It's identical to EMPLOYEEPASSWORDEQ.
func EMPLOYEEPASSWORD(v string) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEMPLOYEEPASSWORD), v))
	})
}

// EMPLOYEENAMEEQ applies the EQ predicate on the "EMPLOYEENAME" field.
func EMPLOYEENAMEEQ(v string) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEMPLOYEENAME), v))
	})
}

// EMPLOYEENAMENEQ applies the NEQ predicate on the "EMPLOYEENAME" field.
func EMPLOYEENAMENEQ(v string) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEMPLOYEENAME), v))
	})
}

// EMPLOYEENAMEIn applies the In predicate on the "EMPLOYEENAME" field.
func EMPLOYEENAMEIn(vs ...string) predicate.Employee {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Employee(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEMPLOYEENAME), v...))
	})
}

// EMPLOYEENAMENotIn applies the NotIn predicate on the "EMPLOYEENAME" field.
func EMPLOYEENAMENotIn(vs ...string) predicate.Employee {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Employee(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEMPLOYEENAME), v...))
	})
}

// EMPLOYEENAMEGT applies the GT predicate on the "EMPLOYEENAME" field.
func EMPLOYEENAMEGT(v string) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEMPLOYEENAME), v))
	})
}

// EMPLOYEENAMEGTE applies the GTE predicate on the "EMPLOYEENAME" field.
func EMPLOYEENAMEGTE(v string) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEMPLOYEENAME), v))
	})
}

// EMPLOYEENAMELT applies the LT predicate on the "EMPLOYEENAME" field.
func EMPLOYEENAMELT(v string) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEMPLOYEENAME), v))
	})
}

// EMPLOYEENAMELTE applies the LTE predicate on the "EMPLOYEENAME" field.
func EMPLOYEENAMELTE(v string) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEMPLOYEENAME), v))
	})
}

// EMPLOYEENAMEContains applies the Contains predicate on the "EMPLOYEENAME" field.
func EMPLOYEENAMEContains(v string) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEMPLOYEENAME), v))
	})
}

// EMPLOYEENAMEHasPrefix applies the HasPrefix predicate on the "EMPLOYEENAME" field.
func EMPLOYEENAMEHasPrefix(v string) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEMPLOYEENAME), v))
	})
}

// EMPLOYEENAMEHasSuffix applies the HasSuffix predicate on the "EMPLOYEENAME" field.
func EMPLOYEENAMEHasSuffix(v string) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEMPLOYEENAME), v))
	})
}

// EMPLOYEENAMEEqualFold applies the EqualFold predicate on the "EMPLOYEENAME" field.
func EMPLOYEENAMEEqualFold(v string) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEMPLOYEENAME), v))
	})
}

// EMPLOYEENAMEContainsFold applies the ContainsFold predicate on the "EMPLOYEENAME" field.
func EMPLOYEENAMEContainsFold(v string) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEMPLOYEENAME), v))
	})
}

// EMPLOYEEPASSWORDEQ applies the EQ predicate on the "EMPLOYEEPASSWORD" field.
func EMPLOYEEPASSWORDEQ(v string) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEMPLOYEEPASSWORD), v))
	})
}

// EMPLOYEEPASSWORDNEQ applies the NEQ predicate on the "EMPLOYEEPASSWORD" field.
func EMPLOYEEPASSWORDNEQ(v string) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEMPLOYEEPASSWORD), v))
	})
}

// EMPLOYEEPASSWORDIn applies the In predicate on the "EMPLOYEEPASSWORD" field.
func EMPLOYEEPASSWORDIn(vs ...string) predicate.Employee {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Employee(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEMPLOYEEPASSWORD), v...))
	})
}

// EMPLOYEEPASSWORDNotIn applies the NotIn predicate on the "EMPLOYEEPASSWORD" field.
func EMPLOYEEPASSWORDNotIn(vs ...string) predicate.Employee {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Employee(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEMPLOYEEPASSWORD), v...))
	})
}

// EMPLOYEEPASSWORDGT applies the GT predicate on the "EMPLOYEEPASSWORD" field.
func EMPLOYEEPASSWORDGT(v string) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEMPLOYEEPASSWORD), v))
	})
}

// EMPLOYEEPASSWORDGTE applies the GTE predicate on the "EMPLOYEEPASSWORD" field.
func EMPLOYEEPASSWORDGTE(v string) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEMPLOYEEPASSWORD), v))
	})
}

// EMPLOYEEPASSWORDLT applies the LT predicate on the "EMPLOYEEPASSWORD" field.
func EMPLOYEEPASSWORDLT(v string) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEMPLOYEEPASSWORD), v))
	})
}

// EMPLOYEEPASSWORDLTE applies the LTE predicate on the "EMPLOYEEPASSWORD" field.
func EMPLOYEEPASSWORDLTE(v string) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEMPLOYEEPASSWORD), v))
	})
}

// EMPLOYEEPASSWORDContains applies the Contains predicate on the "EMPLOYEEPASSWORD" field.
func EMPLOYEEPASSWORDContains(v string) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEMPLOYEEPASSWORD), v))
	})
}

// EMPLOYEEPASSWORDHasPrefix applies the HasPrefix predicate on the "EMPLOYEEPASSWORD" field.
func EMPLOYEEPASSWORDHasPrefix(v string) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEMPLOYEEPASSWORD), v))
	})
}

// EMPLOYEEPASSWORDHasSuffix applies the HasSuffix predicate on the "EMPLOYEEPASSWORD" field.
func EMPLOYEEPASSWORDHasSuffix(v string) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEMPLOYEEPASSWORD), v))
	})
}

// EMPLOYEEPASSWORDEqualFold applies the EqualFold predicate on the "EMPLOYEEPASSWORD" field.
func EMPLOYEEPASSWORDEqualFold(v string) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEMPLOYEEPASSWORD), v))
	})
}

// EMPLOYEEPASSWORDContainsFold applies the ContainsFold predicate on the "EMPLOYEEPASSWORD" field.
func EMPLOYEEPASSWORDContainsFold(v string) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEMPLOYEEPASSWORD), v))
	})
}

// HasPayment applies the HasEdge predicate on the "payment" edge.
func HasPayment() predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PaymentTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PaymentTable, PaymentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPaymentWith applies the HasEdge predicate on the "payment" edge with a given conditions (other predicates).
func HasPaymentWith(preds ...predicate.Payment) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PaymentInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PaymentTable, PaymentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Employee) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Employee) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Employee) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		p(s.Not())
	})
}
