// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/witsarut7/app/ent/customer"
	"github.com/witsarut7/app/ent/employee"
	"github.com/witsarut7/app/ent/payment"
	"github.com/witsarut7/app/ent/paymenttype"
	"github.com/witsarut7/app/ent/roomtype"
)

// Payment is the model entity for the Payment schema.
type Payment struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// PAYDAY holds the value of the "PAYDAY" field.
	PAYDAY time.Time `json:"PAYDAY,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PaymentQuery when eager-loading is set.
	Edges               PaymentEdges `json:"edges"`
	customer_payment    *int
	employee_payment    *int
	paymenttype_payment *int
	roomtype_payment    *int
}

// PaymentEdges holds the relations/edges for other nodes in the graph.
type PaymentEdges struct {
	// Customer holds the value of the customer edge.
	Customer *Customer
	// Employee holds the value of the employee edge.
	Employee *Employee
	// Paymenttype holds the value of the paymenttype edge.
	Paymenttype *Paymenttype
	// Roomtype holds the value of the roomtype edge.
	Roomtype *Roomtype
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// CustomerOrErr returns the Customer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PaymentEdges) CustomerOrErr() (*Customer, error) {
	if e.loadedTypes[0] {
		if e.Customer == nil {
			// The edge customer was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: customer.Label}
		}
		return e.Customer, nil
	}
	return nil, &NotLoadedError{edge: "customer"}
}

// EmployeeOrErr returns the Employee value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PaymentEdges) EmployeeOrErr() (*Employee, error) {
	if e.loadedTypes[1] {
		if e.Employee == nil {
			// The edge employee was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: employee.Label}
		}
		return e.Employee, nil
	}
	return nil, &NotLoadedError{edge: "employee"}
}

// PaymenttypeOrErr returns the Paymenttype value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PaymentEdges) PaymenttypeOrErr() (*Paymenttype, error) {
	if e.loadedTypes[2] {
		if e.Paymenttype == nil {
			// The edge paymenttype was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: paymenttype.Label}
		}
		return e.Paymenttype, nil
	}
	return nil, &NotLoadedError{edge: "paymenttype"}
}

// RoomtypeOrErr returns the Roomtype value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PaymentEdges) RoomtypeOrErr() (*Roomtype, error) {
	if e.loadedTypes[3] {
		if e.Roomtype == nil {
			// The edge roomtype was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: roomtype.Label}
		}
		return e.Roomtype, nil
	}
	return nil, &NotLoadedError{edge: "roomtype"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Payment) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
		&sql.NullTime{},  // PAYDAY
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Payment) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // customer_payment
		&sql.NullInt64{}, // employee_payment
		&sql.NullInt64{}, // paymenttype_payment
		&sql.NullInt64{}, // roomtype_payment
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Payment fields.
func (pa *Payment) assignValues(values ...interface{}) error {
	if m, n := len(values), len(payment.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	pa.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field PAYDAY", values[0])
	} else if value.Valid {
		pa.PAYDAY = value.Time
	}
	values = values[1:]
	if len(values) == len(payment.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field customer_payment", value)
		} else if value.Valid {
			pa.customer_payment = new(int)
			*pa.customer_payment = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field employee_payment", value)
		} else if value.Valid {
			pa.employee_payment = new(int)
			*pa.employee_payment = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field paymenttype_payment", value)
		} else if value.Valid {
			pa.paymenttype_payment = new(int)
			*pa.paymenttype_payment = int(value.Int64)
		}
		if value, ok := values[3].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field roomtype_payment", value)
		} else if value.Valid {
			pa.roomtype_payment = new(int)
			*pa.roomtype_payment = int(value.Int64)
		}
	}
	return nil
}

// QueryCustomer queries the customer edge of the Payment.
func (pa *Payment) QueryCustomer() *CustomerQuery {
	return (&PaymentClient{config: pa.config}).QueryCustomer(pa)
}

// QueryEmployee queries the employee edge of the Payment.
func (pa *Payment) QueryEmployee() *EmployeeQuery {
	return (&PaymentClient{config: pa.config}).QueryEmployee(pa)
}

// QueryPaymenttype queries the paymenttype edge of the Payment.
func (pa *Payment) QueryPaymenttype() *PaymenttypeQuery {
	return (&PaymentClient{config: pa.config}).QueryPaymenttype(pa)
}

// QueryRoomtype queries the roomtype edge of the Payment.
func (pa *Payment) QueryRoomtype() *RoomtypeQuery {
	return (&PaymentClient{config: pa.config}).QueryRoomtype(pa)
}

// Update returns a builder for updating this Payment.
// Note that, you need to call Payment.Unwrap() before calling this method, if this Payment
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *Payment) Update() *PaymentUpdateOne {
	return (&PaymentClient{config: pa.config}).UpdateOne(pa)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (pa *Payment) Unwrap() *Payment {
	tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: Payment is not a transactional entity")
	}
	pa.config.driver = tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *Payment) String() string {
	var builder strings.Builder
	builder.WriteString("Payment(")
	builder.WriteString(fmt.Sprintf("id=%v", pa.ID))
	builder.WriteString(", PAYDAY=")
	builder.WriteString(pa.PAYDAY.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Payments is a parsable slice of Payment.
type Payments []*Payment

func (pa Payments) config(cfg config) {
	for _i := range pa {
		pa[_i].config = cfg
	}
}
