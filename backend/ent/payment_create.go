// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/witsarut7/app/ent/customer"
	"github.com/witsarut7/app/ent/employee"
	"github.com/witsarut7/app/ent/payment"
	"github.com/witsarut7/app/ent/paymenttype"
	"github.com/witsarut7/app/ent/roomtype"
)

// PaymentCreate is the builder for creating a Payment entity.
type PaymentCreate struct {
	config
	mutation *PaymentMutation
	hooks    []Hook
}

// SetPAYDAY sets the PAYDAY field.
func (pc *PaymentCreate) SetPAYDAY(t time.Time) *PaymentCreate {
	pc.mutation.SetPAYDAY(t)
	return pc
}

// SetCustomerID sets the customer edge to Customer by id.
func (pc *PaymentCreate) SetCustomerID(id int) *PaymentCreate {
	pc.mutation.SetCustomerID(id)
	return pc
}

// SetNillableCustomerID sets the customer edge to Customer by id if the given value is not nil.
func (pc *PaymentCreate) SetNillableCustomerID(id *int) *PaymentCreate {
	if id != nil {
		pc = pc.SetCustomerID(*id)
	}
	return pc
}

// SetCustomer sets the customer edge to Customer.
func (pc *PaymentCreate) SetCustomer(c *Customer) *PaymentCreate {
	return pc.SetCustomerID(c.ID)
}

// SetEmployeeID sets the employee edge to Employee by id.
func (pc *PaymentCreate) SetEmployeeID(id int) *PaymentCreate {
	pc.mutation.SetEmployeeID(id)
	return pc
}

// SetNillableEmployeeID sets the employee edge to Employee by id if the given value is not nil.
func (pc *PaymentCreate) SetNillableEmployeeID(id *int) *PaymentCreate {
	if id != nil {
		pc = pc.SetEmployeeID(*id)
	}
	return pc
}

// SetEmployee sets the employee edge to Employee.
func (pc *PaymentCreate) SetEmployee(e *Employee) *PaymentCreate {
	return pc.SetEmployeeID(e.ID)
}

// SetPaymenttypeID sets the paymenttype edge to Paymenttype by id.
func (pc *PaymentCreate) SetPaymenttypeID(id int) *PaymentCreate {
	pc.mutation.SetPaymenttypeID(id)
	return pc
}

// SetNillablePaymenttypeID sets the paymenttype edge to Paymenttype by id if the given value is not nil.
func (pc *PaymentCreate) SetNillablePaymenttypeID(id *int) *PaymentCreate {
	if id != nil {
		pc = pc.SetPaymenttypeID(*id)
	}
	return pc
}

// SetPaymenttype sets the paymenttype edge to Paymenttype.
func (pc *PaymentCreate) SetPaymenttype(p *Paymenttype) *PaymentCreate {
	return pc.SetPaymenttypeID(p.ID)
}

// SetRoomtypeID sets the roomtype edge to Roomtype by id.
func (pc *PaymentCreate) SetRoomtypeID(id int) *PaymentCreate {
	pc.mutation.SetRoomtypeID(id)
	return pc
}

// SetNillableRoomtypeID sets the roomtype edge to Roomtype by id if the given value is not nil.
func (pc *PaymentCreate) SetNillableRoomtypeID(id *int) *PaymentCreate {
	if id != nil {
		pc = pc.SetRoomtypeID(*id)
	}
	return pc
}

// SetRoomtype sets the roomtype edge to Roomtype.
func (pc *PaymentCreate) SetRoomtype(r *Roomtype) *PaymentCreate {
	return pc.SetRoomtypeID(r.ID)
}

// Mutation returns the PaymentMutation object of the builder.
func (pc *PaymentCreate) Mutation() *PaymentMutation {
	return pc.mutation
}

// Save creates the Payment in the database.
func (pc *PaymentCreate) Save(ctx context.Context) (*Payment, error) {
	if _, ok := pc.mutation.PAYDAY(); !ok {
		return nil, &ValidationError{Name: "PAYDAY", err: errors.New("ent: missing required field \"PAYDAY\"")}
	}
	var (
		err  error
		node *Payment
	)
	if len(pc.hooks) == 0 {
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PaymentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pc.mutation = mutation
			node, err = pc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PaymentCreate) SaveX(ctx context.Context) *Payment {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pc *PaymentCreate) sqlSave(ctx context.Context) (*Payment, error) {
	pa, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	pa.ID = int(id)
	return pa, nil
}

func (pc *PaymentCreate) createSpec() (*Payment, *sqlgraph.CreateSpec) {
	var (
		pa    = &Payment{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: payment.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: payment.FieldID,
			},
		}
	)
	if value, ok := pc.mutation.PAYDAY(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: payment.FieldPAYDAY,
		})
		pa.PAYDAY = value
	}
	if nodes := pc.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payment.CustomerTable,
			Columns: []string{payment.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payment.EmployeeTable,
			Columns: []string{payment.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.PaymenttypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payment.PaymenttypeTable,
			Columns: []string{payment.PaymenttypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: paymenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.RoomtypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payment.RoomtypeTable,
			Columns: []string{payment.RoomtypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roomtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return pa, _spec
}
