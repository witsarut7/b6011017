// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/witsarut7/app/ent/payment"
	"github.com/witsarut7/app/ent/roomtype"
)

// RoomtypeCreate is the builder for creating a Roomtype entity.
type RoomtypeCreate struct {
	config
	mutation *RoomtypeMutation
	hooks    []Hook
}

// SetROOMPRICE sets the ROOMPRICE field.
func (rc *RoomtypeCreate) SetROOMPRICE(i int) *RoomtypeCreate {
	rc.mutation.SetROOMPRICE(i)
	return rc
}

// AddPaymentIDs adds the payment edge to Payment by ids.
func (rc *RoomtypeCreate) AddPaymentIDs(ids ...int) *RoomtypeCreate {
	rc.mutation.AddPaymentIDs(ids...)
	return rc
}

// AddPayment adds the payment edges to Payment.
func (rc *RoomtypeCreate) AddPayment(p ...*Payment) *RoomtypeCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rc.AddPaymentIDs(ids...)
}

// Mutation returns the RoomtypeMutation object of the builder.
func (rc *RoomtypeCreate) Mutation() *RoomtypeMutation {
	return rc.mutation
}

// Save creates the Roomtype in the database.
func (rc *RoomtypeCreate) Save(ctx context.Context) (*Roomtype, error) {
	if _, ok := rc.mutation.ROOMPRICE(); !ok {
		return nil, &ValidationError{Name: "ROOMPRICE", err: errors.New("ent: missing required field \"ROOMPRICE\"")}
	}
	var (
		err  error
		node *Roomtype
	)
	if len(rc.hooks) == 0 {
		node, err = rc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RoomtypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rc.mutation = mutation
			node, err = rc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rc.hooks) - 1; i >= 0; i-- {
			mut = rc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RoomtypeCreate) SaveX(ctx context.Context) *Roomtype {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (rc *RoomtypeCreate) sqlSave(ctx context.Context) (*Roomtype, error) {
	r, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	r.ID = int(id)
	return r, nil
}

func (rc *RoomtypeCreate) createSpec() (*Roomtype, *sqlgraph.CreateSpec) {
	var (
		r     = &Roomtype{config: rc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: roomtype.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: roomtype.FieldID,
			},
		}
	)
	if value, ok := rc.mutation.ROOMPRICE(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: roomtype.FieldROOMPRICE,
		})
		r.ROOMPRICE = value
	}
	if nodes := rc.mutation.PaymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   roomtype.PaymentTable,
			Columns: []string{roomtype.PaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: payment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return r, _spec
}
